name: Release and Publish

on:
  push:
    tags:
      - 'v*'

jobs:
  release-and-publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
      - name: Download latest.json
        run: |
          echo "Downloading from: https://github.com/allnationconnect/kaitu/releases/download/${{ steps.get_version.outputs.VERSION }}/latest.json"
          
          # Use curl with fail option and better error handling
          HTTP_CODE=$(curl -w "%{http_code}" -s -H "Authorization: token ${{ secrets.GH_PAT_TOKEN }}" \
               -L https://github.com/allnationconnect/kaitu/releases/download/${{ steps.get_version.outputs.VERSION }}/latest.json \
               -o latest.json)
          
          echo "HTTP Response Code: $HTTP_CODE"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Failed to download latest.json with HTTP code: $HTTP_CODE"
            echo "Response content:"
            cat latest.json
            
            # Check if release exists
            echo "Checking if release ${{ steps.get_version.outputs.VERSION }} exists..."
            curl -H "Authorization: token ${{ secrets.GH_PAT_TOKEN }}" \
                 https://api.github.com/repos/allnationconnect/kaitu/releases/tags/${{ steps.get_version.outputs.VERSION }}
            
            echo "Creating default latest.json since file not found..."
            echo '{}' > latest.json
          fi
          
          echo "Downloaded latest.json size: $(wc -c < latest.json) bytes"
          echo "Content of latest.json:"
          cat latest.json
          echo "--- End of latest.json ---"
          
          # Verify downloaded file is valid JSON
          if ! jq . latest.json > /dev/null 2>&1; then
            echo "Error: latest.json is not valid JSON"
            echo "Raw content (hex dump):"
            hexdump -C latest.json | head -20
            exit 1
          fi
          echo "latest.json downloaded and validated successfully"
               
      - name: Download service.latest.json
        run: |
          echo "Downloading from: https://github.com/allnationconnect/kaitu/releases/download/${{ steps.get_version.outputs.VERSION }}/service.latest.json"
          
          # Use curl with fail option and better error handling
          HTTP_CODE=$(curl -w "%{http_code}" -s -H "Authorization: token ${{ secrets.GH_PAT_TOKEN }}" \
               -L https://github.com/allnationconnect/kaitu/releases/download/${{ steps.get_version.outputs.VERSION }}/service.latest.json \
               -o service.latest.json)
          
          echo "HTTP Response Code: $HTTP_CODE"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Failed to download service.latest.json with HTTP code: $HTTP_CODE"
            echo "Response content:"
            cat service.latest.json
            
            echo "Creating default service.latest.json since file not found..."
            echo '{}' > service.latest.json
          fi
          
          echo "Downloaded service.latest.json size: $(wc -c < service.latest.json) bytes"
          echo "Content of service.latest.json:"
          cat service.latest.json
          echo "--- End of service.latest.json ---"
          
          # Verify downloaded file is valid JSON
          if ! jq . service.latest.json > /dev/null 2>&1; then
            echo "Error: service.latest.json is not valid JSON"
            echo "Raw content (hex dump):"
            hexdump -C service.latest.json | head -20
            exit 1
          fi
          echo "service.latest.json downloaded and validated successfully"
               
      - name: Create npm directory if not exists
        run: mkdir -p npm
        
      - name: Update package.json with service data
        run: |
          # Read service data and update package.json service field
          echo "Reading service.latest.json..."
          cat service.latest.json
          
          # Check if npm/package.json exists, if not create basic structure
          if [ ! -f npm/package.json ]; then
            echo '{}' > npm/package.json
          fi
          
          # Update service field in package.json using slurpfile to avoid shell variable issues
          jq --slurpfile service service.latest.json '.service = $service[0]' npm/package.json > npm/package.json.tmp
          mv npm/package.json.tmp npm/package.json
          echo "Updated package.json with service data:"
          jq '.service' npm/package.json
          
      - name: Update package.json with latest.json data
        run: |
          # Read latest.json and merge with package.json
          echo "Reading latest.json..."
          cat latest.json
          
          # Merge latest.json data into package.json (latest.json keys override package.json) using slurpfile
          jq --slurpfile latest latest.json '. * $latest[0]' npm/package.json > npm/package.json.tmp
          mv npm/package.json.tmp npm/package.json
          echo "Final package.json after merging latest.json:"
          cat npm/package.json
          
      - name: Download files listed in latest.json to npm directory
        run: |
          # Extract file list from latest.json and download each file
          FILES=$(jq -r '.files[]? // empty' latest.json 2>/dev/null || echo "")
          
          if [ -n "$FILES" ]; then
            for file in $FILES; do
              echo "Downloading $file..."
              curl -H "Authorization: token ${{ secrets.GH_PAT_TOKEN }}" \
                   -L https://github.com/allnationconnect/kaitu/releases/download/${{ steps.get_version.outputs.VERSION }}/$file \
                   -o npm/$file
            done
          fi
          
      - name: Publish to npm
        working-directory: ./npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}