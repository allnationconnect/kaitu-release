name: Build and Release Kaitu

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build-and-release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            name: macos
            targets: universal-apple-darwin,x86_64-apple-darwin,aarch64-apple-darwin
          - os: windows-latest
            name: windows
            targets: x86_64-pc-windows-msvc
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout Kaitu repository
        uses: actions/checkout@v4
        with:
          repository: allnationconnect/kaitu
          path: kaitu
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: 'kaitu/client/desktop/yarn.lock'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust targets (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Add Rust targets (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          rustup target add x86_64-pc-windows-msvc

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            kaitu/client/desktop/src-tauri -> target
          cache-on-failure: true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: kaitu/go.sum

      - name: Get version
        id: get-version
        shell: bash
        working-directory: kaitu
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=$(node -p "require('./client/desktop/package.json').version")
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Install dependencies
        working-directory: kaitu/client/desktop
        run: yarn install

      - name: Build with Makefile (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        working-directory: kaitu
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        run: |
          echo "üèóÔ∏è Building Kaitu Desktop for macOS..."
          make prepare
          make build-desktop-macos

      - name: Build with Makefile (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        working-directory: kaitu
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: |
          echo "üèóÔ∏è Building Kaitu Desktop for Windows..."
          make prepare
          make build-desktop-windows

      - name: List build artifacts
        shell: bash
        working-directory: kaitu
        run: |
          echo "üì¶ Build artifacts in release/${{ steps.get-version.outputs.VERSION }}:"
          ls -la release/${{ steps.get-version.outputs.VERSION }}/ || echo "No files found"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kaitu-${{ matrix.name }}-${{ steps.get-version.outputs.VERSION }}
          path: |
            kaitu/release/${{ steps.get-version.outputs.VERSION }}/**/*

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Kaitu repository for version
        uses: actions/checkout@v4
        with:
          repository: allnationconnect/kaitu
          path: kaitu
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: get-version
        shell: bash
        working-directory: kaitu
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=$(node -p "require('./client/desktop/package.json').version")
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize release files
        run: |
          VERSION="${{ steps.get-version.outputs.VERSION }}"
          mkdir -p release/${VERSION}
          
          # Copy all files from artifacts to release directory
          find artifacts -type f -exec cp {} release/${VERSION}/ \;
          
          echo "üì¶ Release files organized in release/${VERSION}:"
          ls -la release/${VERSION}/

      - name: Create tarball of release directory
        run: |
          VERSION="${{ steps.get-version.outputs.VERSION }}"
          tar -czf kaitu-release-${VERSION}.tar.gz -C release ${VERSION}
          echo "üì¶ Created release tarball: kaitu-release-${VERSION}.tar.gz"
          ls -lh kaitu-release-${VERSION}.tar.gz

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get-version.outputs.VERSION }}
          name: Kaitu Release v${{ steps.get-version.outputs.VERSION }}
          body: |
            ## Kaitu Release v${{ steps.get-version.outputs.VERSION }}
            
            ### üì¶ Release Package
            
            This release contains the complete build artifacts for Kaitu Desktop Application.
            
            **Included Platforms:**
            - macOS (Universal, Intel x86_64, Apple Silicon aarch64)
            - Windows (x86_64)
            
            ### üìÅ Package Contents
            
            The release tarball contains the `release/${{ steps.get-version.outputs.VERSION }}/` directory with all platform-specific builds:
            
            **macOS:**
            - `Kaitu_${{ steps.get-version.outputs.VERSION }}_universal.dmg` - Universal DMG installer
            - `Kaitu_${{ steps.get-version.outputs.VERSION }}_universal.app.tar.gz` - Universal app bundle
            - `Kaitu_${{ steps.get-version.outputs.VERSION }}_x86_64.app.tar.gz` - Intel x86_64 app bundle
            - `Kaitu_${{ steps.get-version.outputs.VERSION }}_aarch64.app.tar.gz` - Apple Silicon app bundle
            - Signature files (`.sig`) for auto-updater
            
            **Windows:**
            - `Kaitu_${{ steps.get-version.outputs.VERSION }}_x64-setup.exe` - NSIS installer
            - `Kaitu_${{ steps.get-version.outputs.VERSION }}_x64_en-US.msi` - MSI installer
            - NSIS update packages (`.nsis.zip`)
            - Signature files (`.sig`) for auto-updater
            
            ### üöÄ Installation
            
            1. Download the release tarball
            2. Extract: `tar -xzf kaitu-release-${{ steps.get-version.outputs.VERSION }}.tar.gz`
            3. Navigate to `release/${{ steps.get-version.outputs.VERSION }}/`
            4. Install the appropriate package for your platform
            
            ### ‚ú® Features
            - Built with Tauri v2
            - Code-signed and notarized binaries
            - Auto-update support
            - Cross-platform compatibility
            
          files: |
            kaitu-release-${{ steps.get-version.outputs.VERSION }}.tar.gz
            release/${{ steps.get-version.outputs.VERSION }}/*
          draft: false
          prerelease: false